HW1
1. Create a folder called cursor_git:

mkdir python_cursor/hw1/cursor_git

2. cd into the cursor_git folder:

cd python_cursor/hw1/cursor_git

3. Create a file called first.py:

touch first.py

4. Add first.py to the staging area:

git init
git status
git add first.py

5. Commit with the message "adding first.py»:

git commit -m "adding first.py"

6. Check out your commit with git log:

git log

7. Create another file called second.py:

touch second.py

8. Add second.py to the staging area:

git add second.py

9. Commit with the message "adding second.py»:

git commit -m "adding second.py"

10. Remove the first.py file:

rm first.py

11. Add this change to the staging area:

git add .

12. Commit with the message "removing first.py»:

git commit -m "removing first.py"

13. Check out your commits using git log:

git log

14. Push your changes to remote:

git branch -m master main
git remote add origin https://github.com/dianaobarianyk/Cursor_Python_course.git
git push -u origin main

15. Create new branch from master called `first` (without checkout):

git branch first

16. Create one more branch from master called `second` (with checkout to it):

git checkout -b second

17. Change the second.py file with "print('Hello')" string:

echo "print('Hello')" > second.py

18. Stash you changes and checkout to first branch:

git stash
git checkout first

19. Checkout back and Stash Pop the changes:

git checkout second
git stash pop

20. Add your changes to the staging area:

git add .

21. Commit with the message "Changing second.py»:

git commit -m "Changing second.py"

22. Push your changes to remote:

git push

23. Checkout to first branch:

git checkout first

24. Change the second.py file with print("Cursor") string:

echo "print(‘Cursor’)" > second.py

25. Add your changes to the staging area:

git add .

26. Commit with the message "Changing second.py»:

git commit -m "Changing second.py"

27. Push your changes to remote:

git push

28. Checkout to master branch:

git checkout main

29*. Merge the changes from second branch:

git merge second

30*. Then merge the changes from first branch:

git merge first

31*. Resolve conflict and push the changes to remote

git status
git add .
git commit -m "Resolving the conflict"
git push

